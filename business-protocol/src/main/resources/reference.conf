akka {

  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  stdout-loglevel = "OFF"
  loglevel = "WARNING"

  actor {
    debug {
      # enable function of Actor.loggable(), which is to log any received message
      # at DEBUG level, see the “Testing Actor Systems” section of the Akka
      # Documentation at http://akka.io/docs
      receive = on

      # enable DEBUG logging of subscription changes on the eventStream
      event-stream = off

      # enable DEBUG logging of unhandled messages
      unhandled = on

      # enable WARN logging of misconfigured routers
      router-misconfiguration = on

    }
    provider = "akka.cluster.ClusterActorRefProvider"

    serializers {
      protoser = "com.evernym.agent.common.actor.ProtoBufSerializer"
    }
    serialization-bindings {
      "com.evernym.agent.common.actor.TransformedEvent" = protoser
    }
  }

  remote {
    log-remote-lifecycle-events = off
    # log-sent-messages = on

    # changing threshold to 12 as recommended in the docs. http://doc.akka.io/docs/akka/current/scala/remoting.html#Failure_Detector
    watch-failure-detector.threshold = 12.0

    netty.tcp {
      # assuming you are NOT running more than one node on same vm/machine
      # if you are, then, you'll have to change below port to be unique per node on same vm/machine
      port = 2552

      # put IP address which other cluster member can reach to (REVIEW_AND_DECIDE)
      hostname = "localhost"

      maximum-frame-size = 192000b
    }
  }

  cluster {
    auto-down-unreachable-after = off
    unreachable-nodes-reaper-interval = 10s

    # seed nodes which bootstraps the akka cluster,
    # for one node cluster, it would contain its own information
    # for multi node cluster, it depends on us which one we want to configure as seed nodes
    # if you have more than one node in a cluster, than change 'localhost' in below seed nodes
    # to their ip addresses which this node can access to
    # replace 'localhost' as well with ip address if that seed nodes is not running on local vm/machine
    # example1 (if you are setting up consumer agency): "akka.tcp://consumer-agency@localhost:2551"
    # example2 (if you are setting up enterprise agency): "akka.tcp://enterprise-agency@localhost:2551"
    seed-nodes = [
      "akka.tcp://agency-agent@localhost:2552"
    ]
  }

  persistence {
    data-storage-path = "/tmp/agent"

    journal {
      plugin = "akka.persistence.journal.leveldb"
      leveldb {
        dir = ${akka.persistence.data-storage-path}"/events/journal"
        native = false
      }
    }

    snapshot-store {
      plugin = "akka.persistence.snapshot-store.local"
      local.dir = ${akka.persistence.data-storage-path}"/events/snapshot"
    }

  }

  http.server {
    remote-address-header = on
  }

}

agent {
  libindy {

    # library dir location which contains files like libindy.so, libmysqlstorage.so etc
    library-dir-location = "/usr/lib"
    library-dir-location = ${?LIB_INDY_LIBRARY_DIR_LOCATION}  //environment variable if set, override above value

    wallet {
      # this value is provided to libindy's create wallet api by which it knows which type of wallet we want to use
      # for now, it only supports "default" and "mysql"
      type = "default"
      storage-path = "/tmp/agent/wallet"
    }

    ledger {
      # ledger pool transaction file location
      genesis-txn-file-location = "common/data/genesis.txt"
      genesis-txn-file-location = ${?LIB_INDY_POOL_GENESIS_TXN_FILE_LOCATION}  //environment variable if set, override above value

      # it helps libindy keeping different pool configurations in different directory
      # whatever name you provide here, a directory with that name gets created under ~/.indy_client/pool/
      # keeping default should also be ok
      pool-name = "default_pool"

      # defines which indy node txn protocol version to be used
      txn-protocol-version = 2
      txn-protocol-version = ${?LIB_INDY_POOL_TXN_PROTOCOL_VERSION}
    }
  }
}

agent {

  salt {

    # salt which is mixed to generate secure hashed wallet name
    wallet-name = "5k4k4k3k4k5l"
    wallet-name = ${?SALT_WALLET_NAME}  //environment variable if set, override above value

    # salt which is mixed to get symmetric key to encrypt/decrypt wallet
    wallet-encryption = "fGCPX33373n7hImz4T5y"
    wallet-encryption = ${?SALT_WALLET_ENCRYPTION}  //environment variable if set, override above value

    # salt which is mixed to get symmetric key to encrypt/decrypt database events
    event-encryption = "qo9V010GhLAqOpF0jMhKlOuJnM34G6NHkBePojHgh1HgNg872k"
    event-encryption = ${?SALT_EVENT_ENCRYPTION} //environment variable if set, override above value
  }

}